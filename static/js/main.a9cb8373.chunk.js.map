{"version":3,"sources":["AddTask/AddTask.js","TaskItem/TaskItem.js","CompletedTask/CompletedTask.js","App.js","serviceWorker.js","index.js"],"names":["AddTask","props","useState","text","setText","type","name","onChange","event","target","value","maxLength","className","onClick","addTask","TaskItem","completeTask","id","deleteTask","CompletedTask","activateTask","App","uuidv4","completed","tasks","setTasks","activeTasks","filter","task","completedTasks","updatedTasks","map","newTask","length","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a9cb8373.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport './AddTask.css';\n\nfunction AddTask(props) {\n  const [text, setText] = useState(\"\");\n\n  function handleTextChange(event){\n    setText(event.target.value);\n  }\n\n  function handleAddTaskClick(){\n    props.addTask(text);\n  }\n\n  return (\n        <Fragment>\n        <form>\n        <input \n            type=\"text\" \n            name=\"newTask\" \n            onChange={ handleTextChange }  \n            value= { text }\n            maxLength=\"64\"\n          /> &nbsp;\n        <button \n            type=\"button\"\n            className=\"btn btn-primary btn-lg\"\n            onClick={ handleAddTaskClick }\n            >Add New Task</button>\n        </form>\n        </Fragment>\n  );\n}\nexport default AddTask;","import React from 'react';\nimport './TaskItem.css';\n\nfunction TaskItem(props) {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n      <div className=\"col-md-8\">\n          <li>\n            { props.text }\n          </li>\n        </div>\n        <div className=\"col-md-4\">\n              <button \n                className=\"btn btn-outline-success btn-lg\" \n                onClick={ () => props.completeTask(props.id) }>\n                  Completed\n              </button> &nbsp; \n              <button \n                className=\"btn btn-outline-warning btn-lg\" \n                onClick={ () => props.deleteTask(props.id) }>\n                  Delete\n              </button> \n        </div>\n      </div>\n    </div>\n  );\n}\nexport default TaskItem;","import React from 'react';\nimport './CompletedTask.css';\n\nfunction CompletedTask(props) {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n      <div className=\"col-md-8 tasks-completed\">\n          <li>\n          { props.text }</li>\n        </div>\n        <div className=\"col-md-4\">\n              <button \n                className=\"btn btn-outline-primary btn-lg\" \n                onClick={ () => props.activateTask(props.id) }>\n                  Activate\n              </button> &nbsp;\n              <button \n                className=\"btn btn-outline-warning btn-lg\" \n                onClick={ () => props.deleteTask(props.id) }>\n                  Delete\n              </button> \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CompletedTask;","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport AddTask from \"./AddTask/AddTask\"\nimport TaskItem from \"./TaskItem/TaskItem\"\nimport CompletedTask from \"./CompletedTask/CompletedTask\"\n\nimport './App.css';\n\nfunction App() {\n\n  const [ tasks, setTasks ] = useState([\n    { id: uuidv4(), text: \"This task consists of having to do the following things in order to fill up some space.\", completed: false },\n    { id: uuidv4(), text: \"This task doesn't take up as much space.\", completed: false },\n    { id: uuidv4(), text: \"This task should take up about as much space as Task 1 should take.\", completed: false },\n    { id: uuidv4(), text: \"This task is super short.\", completed: false },\n    { id: uuidv4(), text: \"I'm confused on why the 'completed' button has a shadow.\", completed: false },\n    { id: uuidv4(), text: \"I also wish I could make the 'completed' and 'delete' buttons flush with the bottom of each 'card' in wide view.\", completed: false },\n    { id: uuidv4(), text: \"And I got a lot of criticism for the color scheme I picked, but I always depended on someone else to get the colors right.\", completed: false },\n    { id: uuidv4(), text: \"Look at this completed task.  Job well done!\", completed: true },\n    { id: uuidv4(), text: \"Let's have some text and some back patting to show how cool this app can be.\", completed: true },\n    { id: uuidv4(), text: \"I wonder if these would be time stamped in the database, or if that is excess to requirements.\", completed: true },\n    { id: uuidv4(), text: \"I think I might make the border card colors a bit closer to the background.\", completed: true },\n    { id: uuidv4(), text: \"This fifth task to edge-test the bootstrap css\", completed: true }\n  ]);\n\n  const activeTasks = tasks.filter(task => !task.completed);\n  const completedTasks = tasks.filter(task => task.completed);\n\n  function deleteTask(id) {\n    const updatedTasks = tasks.filter(task => task.id !== id);\n    setTasks(updatedTasks);\n  }\n\n  function completeTask(id){\n    const updatedTasks = tasks.map(task => {\n      if (task.id === id){\n        task.completed = true;\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function activateTask(id){\n    const updatedTasks = tasks.map(task => {\n      if (task.id === id){\n        task.completed = false;\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function addTask(text){\n    const newTask = {\n      id: uuidv4(), \n      text: text, \n      completed: false \n    }\n    const updatedTasks = [ ...tasks, newTask ];\n    setTasks(updatedTasks);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"container\">\n        <h1>My To-Do List</h1>\n      </header>\n\n      <div className=\"container\">\n        <div className=\"row task\">\n        <div className=\"col-md-8\">\n            <AddTask addTask= { addTask } />\n          </div>\n          <div className=\"col-md-4 text-right\">\n            <h2>\n                You have { activeTasks.length } { activeTasks.length === 1 ? \"task\" : \"tasks\" } to do\n            </h2>\n          </div>\n        </div>\n      </div>\n\n      <p></p>\n\n      <div className=\"container\">\n\n        <div className=\"row task\">\n          <div className=\"col-md-12\">\n            <ol>\n              { activeTasks.map(task => <TaskItem \n                completeTask = { completeTask } \n                deleteTask={ deleteTask }  \n                id={ task.id } \n                key={ task.id }\n                text={ task.text } \n                />)}\n            </ol>\n          </div>\n        </div>\n\n        <p></p>\n\n        <div className=\"row task\">\n          <div className=\"col-md-12\">\n          <ol>\n            {completedTasks.map(task => <CompletedTask \n            activateTask = { activateTask } \n            deleteTask= { deleteTask } \n            id={task.id } \n            key={ task.id } \n            text={ task.text }\n            />)}\n          </ol>\n          </div>\n        </div>\n        \n      </div>\n\n      <div className=\"container text-center\">\n        <cite>&copy; Jennifer Calland 2020</cite> &nbsp;\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}