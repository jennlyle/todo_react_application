{"version":3,"sources":["AddTask/AddTask.js","TaskItem/TaskItem.js","CompletedTask/CompletedTask.js","App.js","serviceWorker.js","index.js"],"names":["AddTask","name","action","type","className","TaskItem","props","text","CompletedTask","App","clear","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTAWeA,MARf,WACE,OACE,0BAAMC,KAAK,GAAGC,OAAO,IACjB,2BAAOC,KAAK,OAAOF,KAAK,YACxB,4BAAQG,UAAU,mBAAlB,kB,MCKOC,MATf,SAAkBC,GAChB,OACE,yBAAKF,UAAU,YACb,2BAAKE,EAAMC,MACX,4BAAQH,UAAU,sBAAlB,aACE,4BAAQA,UAAU,mBAAlB,Y,MCGOI,MARf,SAAuBF,GACrB,OACE,yBAAKF,UAAU,YACb,uBAAGA,UAAU,6BAA8BE,EAAMC,Q,MC6HxCE,MA7Hf,WACE,OACE,yBAAKL,UAAU,OAGb,4BAAQA,UAAU,aAChB,8CAMF,uBAAGM,MAAM,QACT,2BACE,wDAOF,uBAAGA,MAAM,QAET,yBAAKN,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,SAcN,uBAAGM,MAAM,QACT,yBAAKN,UAAU,aACX,yBAAKA,UAAU,OAEb,kBAAC,EAAD,CAAUG,KAAK,uGAEf,kBAAC,EAAD,CAAUA,KAAK,uDACf,kBAAC,EAAD,CAAUA,KAAK,kFAEf,kBAAC,EAAD,CAAUA,KAAK,gCACf,kBAAC,EAAD,CAAUA,KAAK,0EACf,kBAAC,EAAD,CAAUA,KAAK,mIAEf,kBAAC,EAAD,CAAUA,KAAK,+IAMrB,uBAAGG,MAAM,QACT,yBAAKN,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mBACb,iDAMF,yBAAKA,UAAU,OAEb,kBAAC,EAAD,CAAeG,KAAK,oEAEpB,kBAAC,EAAD,CAAeA,KAAK,oGAEpB,kBAAC,EAAD,CAAeA,KAAK,qHAEpB,kBAAC,EAAD,CAAeA,KAAK,mGAEpB,kBAAC,EAAD,CAAeA,KAAK,kEAK1B,uBAAGG,MAAM,QACR,yBAAKN,UAAU,OACZ,yBAAKA,UAAU,mBACX,4BAAQA,UAAU,qBAAlB,OAEQ,0BAAMO,MAAM,gBAAZ,oBAFR,iBCjFMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b1893ca7.chunk.js","sourcesContent":["import React from 'react';\nimport './AddTask.css';\n\nfunction AddTask() {\n  return (\n    <form name=\"\" action=\"\">\n        <input type=\"text\" name=\"newTask\"></input>\n        <button className=\"btn btn-primary\">Add New Task</button>\n    </form>\n  );\n}\nexport default AddTask;","import React from 'react';\nimport './TaskItem.css';\n\nfunction TaskItem(props) {\n  return (\n    <div className=\"col-sm-3\">\n      <p>{ props.text }</p>\n      <button className=\"tasktn btn-success\">Completed</button>\n        <button className=\"btn btn-warning\">Delete</button>\n    </div>\n  );\n}\nexport default TaskItem;","import React from 'react';\nimport './CompletedTask.css';\n\nfunction CompletedTask(props) {\n  return (\n    <div className=\"col-sm-3\">\n      <p className=\"task-item-completed__text\">{ props.text }</p>\n    </div>\n  );\n}\n\nexport default CompletedTask;","import React from 'react';\nimport AddTask from \"./AddTask/AddTask\"\nimport TaskItem from \"./TaskItem/TaskItem\"\nimport CompletedTask from \"./CompletedTask/CompletedTask\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      { /* HEADER */ }\n      <header className=\"container\">\n        <h1>My To-Do List</h1>\n      </header>\n\n\n\n      { /* NUMBER OF ACTIVE TASKS */ }\n      <p clear=\"all\" />\n      <p>\n        <h2>You have X tasks to do.</h2>\n      </p>\n\n\n\n\n      { /* ADD TASK COMPONENT */ }\n      <p clear=\"all\" />\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"container-fluid\">\n            <AddTask>\n\n            </AddTask>\n          </div>\n        </div>\n      </div>\n\n\n\n\n\n\n\n      { /* LIST ACTIVE TASKS COMPONENT */ }\n      <p clear=\"all\" />\n      <div className=\"container\">\n          <div className=\"row\">\n          { /* EACH ACTIVE LIST COMPONENT */ }\n            <TaskItem text=\"Task 1 Text: Task 1 consists of having to do the following things \n                      in order to fill up some space.\" />\n            <TaskItem text=\"Task 2 Text: Task 2 doesn't take up as much space.\" />\n            <TaskItem text=\"Task 3 Text: Task 3 should take up about as much space as Task 1\n                        should take.\" />\n            <TaskItem text=\"Task 4 Text is super short.\" />\n            <TaskItem text=\"Task 5 Text: I'm confused on why the 'completed' button has a shadow.\" />\n            <TaskItem text=\"Task 6 Text: I also wish I could make the 'completed' and 'delete' \n                    buttons flush with the bottom of each 'card' in wide view.\" />\n            <TaskItem text=\"Task 7 Text: And I got a lot of criticism for the color scheme I \n                    picked, but I always depended on someone else to get the colors right.\" />\n          </div>\n      </div>\n\n      { /* LIST COMPLETED TASKS COMPONENT */ }\n      <p clear=\"all\" />\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"container-fluid\">\n            <h2>\n              Completed Tasks\n            </h2>\n          </div>\n        </div>\n\n          <div className=\"row\">\n          { /* EACH COMPLETED LIST COMPONENT */ }\n            <CompletedTask text=\"Completed Task 1: Look at this completed task.  Job \n            well done!\" />\n            <CompletedTask text=\"Completed Task 2: let's have some text and some back \n            patting to show how cool this app can be.\" />\n            <CompletedTask text=\"Completed Task 3: I wonder if these would be time stamped\n            in the database, or if that is excess to requirements.\" />\n            <CompletedTask text=\"Completed Task 4: I think I might make the border card \n            colors a bit closer to the background.\" />\n            <CompletedTask text=\"Completed Task 5: fifth task to edge-test the bootstrap css\" />\n          </div>\n      </div>\n\n      { /* FOOTER */ }\n      <p clear=\"all\" />\n       <div className=\"row\">\n          <div className=\"container-fluid\">\n              <footer className=\"blockquote-footer\">\n                  &copy; \n                      <cite title=\"Source Title\">\n                          Jennifer Calland\n                      </cite> \n                      &nbsp; 2020\n              </footer> \n          </div>\n      </div>\n\n\n\n      \n\n      \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}